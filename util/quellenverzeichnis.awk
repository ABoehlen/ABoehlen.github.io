#!/usr/local/bin/awk -f
#########################################################################################
#
# quellenverzeichnis.awk V1.2 27.03.2022
# Autor: Adrian Boehlen
# Aktualisierung: laufend
#
# Script generiert die geordnete Quellenliste aus der originalen, ungeordneten Textdatei.
# Als Trennzeichen ist "$" zu verwenden, andernfalls Zeile 17 anpassen
# Die Reihenfolge ist im verweise.js definiert.
# Der Output erfolgt als HTML-Code, der dann direkt ins gewuenschte Dokument integriert
# werden kann. Weblinks werden beruecksichtigt, muessen aber am Beginn des Textes stehen.
#
#########################################################################################

BEGIN {
  # Feldtrenner in Quellen-Textdokument
  FS = "$";

  # Scriptname ermitteln (siehe https://unix.stackexchange.com/questions/228072/how-to-print-own-script-name-in-mawk)
  getline t < "/proc/self/cmdline";
  split(t, a, "\0");
  scriptname = sprintf("%s", a[3]);

  # Usage ausgeben, wenn Anzahl Argumente nicht stimmt und Programm beenden
  if (ARGC != 2) {
    printf("\n****************************************************\n") > "/dev/stderr";
    printf("     Usage: %s <Quelltextfile>\n", scriptname)             > "/dev/stderr";
    printf("****************************************************\n\n") > "/dev/stderr";
    beende = 1; # um END-Regel zum sofortigen Beenden zu erzwingen
    exit;
  }

  # nachstehend benoetigtes Array mit Nummerierung eintragen
  # dieses muss identisch mit dem betreffenden in verweise.js sein
  ##################################

advValleyDict["aa"] = "18";
advValleyDict["ab"] = "6";
advValleyDict["ac"] = "19";
advValleyDict["ad"] = "21";
advValleyDict["ae"] = "22";
advValleyDict["af"] = "29"; 
advValleyDict["ag"] = "7";
advValleyDict["ah"] = "20";
advValleyDict["ai"] = "23";
advValleyDict["aj"] = "24";
advValleyDict["ak"] = "33";
advValleyDict["al"] = "9";
advValleyDict["am"] = "1";
advValleyDict["an"] = "3";
advValleyDict["ao"] = "10";
advValleyDict["ap"] = "11";
advValleyDict["aq"] = "16";
advValleyDict["ar"] = "13";
advValleyDict["as"] = "14";
advValleyDict["at"] = "17";
advValleyDict["au"] = "5";
advValleyDict["av"] = "12";
advValleyDict["aw"] = "15";
advValleyDict["ax"] = "2";
advValleyDict["ay"] = "4";
advValleyDict["az"] = "8";
advValleyDict["ba"] = "25";
advValleyDict["bb"] = "27";
advValleyDict["bc"] = "28";
advValleyDict["bd"] = "30";
advValleyDict["be"] = "31";
advValleyDict["bf"] = "34";
advValleyDict["bg"] = "35";
advValleyDict["bh"] = "36";
advValleyDict["bi"] = "37";
advValleyDict["bj"] = "32";
advValleyDict["bk"] = "38";
advValleyDict["bl"] = "39";
advValleyDict["bm"] = "40";
advValleyDict["bn"] = "41";
advValleyDict["bo"] = "42";
advValleyDict["bp"] = "43";
advValleyDict["bq"] = "44";
advValleyDict["br"] = "45";
advValleyDict["bs"] = "46";
advValleyDict["bt"] = "47";
advValleyDict["bu"] = "48";
advValleyDict["bv"] = "49"; // hoechste
advValleyDict["bw"] = "26";

  ##################################
  # Kopie von urspruenglichem Array unter dem einheitlichen Namen "verweise" anlegen
  for (i in advValleyDict)
    verweise[i] = advValleyDict[i];
}

{
  # Daten zeilenweise einlesen und in Array quellen ablegen
  quellen[$1] = $2;
}

END {
  # damit END nicht ausgefuehrt wird, falls kein File gelesen wird
  if (beende == 1)
    exit;

  # Nummer von verweise mit Text von quellen verbinden
  for (i in verweise)
    quellen_nr[verweise[i]] = quellen[i];

  #### Daten ausgeben ####
  ele = length(quellen_nr);
  print "<!-- automatically generated by quellenverzeichnis.awk -->";

  for (i = 1; i <= ele; i++) {
    # erste Spalte mit hochgestellter Nummer ausgeben
    printf("%s\n\t%s\n\t\t%s%s%s\n", "<div class=\"Reihe\">", "<div class=\"Zelle_Verw_l\">", "<sup>", i, "</sup>");
    printf("\t%s\n", "</div>");

    # falls Quelle ein Weblink ist...
    if (quellen_nr[i] ~ /^http/) {
      anz = split(quellen_nr[i], weblink, " ");

      # ...Link setzen, damit neues Tab geoeffnet wird
      printf("\t%s\n\t\t%s%s%s%s%s", "<div class=\"Zelle_Verw_r\">", "<a target=\"_blank\" href=\"", weblink[1], "\">", weblink[1], "</a>");
      
      # Falls noch Erlaeuterungen folgen...
      if (anz > 1) {

        # ...Resttext bilden und ausgeben, sowie Tabellenspalte und Zeile abschliessen...
        rest = "";
        delete weblink[1];
        for (j = 2; j <= (anz); j++)
          rest = rest " " weblink[j];
        printf("%s\n", rest);
        printf("\t%s\n", "</div>");
        printf("%s\n", "</div>");
      }

      # ...andernfalls Tabellenspalte und Zeile direkt abschliessen
      else {
        printf("\n\t%s\n", "</div>");
        printf("%s\n", "</div>");
      }
    }
    else {
      # Offlinequellen als normalen Text ausgeben, Tabellenspalte und Zeile abschliessen
      printf("\t%s\n\t\t%s\n", "<div class=\"Zelle_Verw_r\">", quellen_nr[i]);
      printf("\t%s\n", "</div>");
      printf("%s\n", "</div>");
    }
  }
}